{"version":3,"sources":["SeasonDisplay.jsx","Spinner.jsx","App.jsx","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","renderContent","Component","ReactDOM","render","document","getElementById"],"mappings":"+LAIMA,G,MAAe,CACnBC,OAAQ,CACNC,KAAM,mCACNC,SAAU,OAEZC,OAAQ,CACNF,KAAM,+BACNC,SAAU,eAyBCE,EAbO,SAACC,GACrB,IATiBC,EAAKC,EAShBC,GATWF,EASQD,EAAMC,KATTC,GASc,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIC,EAEJP,EAAaS,GAAhCP,EAFuB,EAEvBA,KAAMC,EAFiB,EAEjBA,SAEd,OACE,yBAAKS,UAAS,yBAAoBH,IAChC,uBAAGG,UAAS,6BAAwBT,EAAxB,WACZ,wBAAIS,UAAU,0BAA0BV,GACxC,uBAAGU,UAAS,6BAAwBT,EAAxB,aC7BZU,EAAU,SAACP,GACf,OACE,yBAAKM,UAAU,oBACb,yBAAKA,UAAU,sBAAsBN,EAAMQ,WAKjDD,EAAQE,aAAe,CACrBD,QAAS,cAGID,QCqBAG,E,4MA9BbC,MAAQ,CAAEV,IAAK,KAAMW,aAAc,I,kEAEd,IAAD,OAClBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAACC,GACC,EAAKC,SAAS,CAAEjB,IAAKgB,EAASE,OAAOC,cAEvC,SAACC,GACC,EAAKH,SAAS,CAAEN,aAAcS,EAAIb,e,sCAMtC,OAAIc,KAAKX,MAAMC,eAAiBU,KAAKX,MAAMV,IAClC,uCAAaqB,KAAKX,MAAMC,eAG5BU,KAAKX,MAAMC,cAAgBU,KAAKX,MAAMV,IAClC,kBAAC,EAAD,CAAeA,IAAKqB,KAAKX,MAAMV,MAGjC,kBAAC,EAAD,CAASO,QAAQ,qC,+BAIxB,OAAO,6BAAMc,KAAKC,qB,GA3BJC,aCAlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.63301b8c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./SeasonDisplay.css\";\r\n\r\nconst seasonConfig = {\r\n  summer: {\r\n    text: \"Lets hit the beach! 🏊\",\r\n    iconName: \"sun\",\r\n  },\r\n  winter: {\r\n    text: \"Brr, it is cold 🥶\",\r\n    iconName: \"snowflake\",\r\n  },\r\n};\r\n\r\nconst getSeason = (lat, month) => {\r\n  if (month > 2 && month < 9) {\r\n    return lat > 0 ? \"summer\" : \"winter\";\r\n  } else {\r\n    return lat > 0 ? \"winter\" : \"summer\";\r\n  }\r\n};\r\n\r\nconst SeasonDisplay = (props) => {\r\n  const season = getSeason(props.lat, new Date().getMonth());\r\n  const { text, iconName } = seasonConfig[season];\r\n\r\n  return (\r\n    <div className={`season-display ${season}`}>\r\n      <i className={` icon-left massive ${iconName} icon`}></i>\r\n      <h1 className=\"animated infinite tada\">{text}</h1>\r\n      <i className={`icon-right massive ${iconName} icon`}></i>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SeasonDisplay;\r\n","import React from \"react\";\r\n\r\nconst Spinner = (props) => {\r\n  return (\r\n    <div className=\"ui active dimmer\">\r\n      <div className=\"ui big text loader\">{props.message}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nSpinner.defaultProps = {\r\n  message: \"Loading...\",\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { Component } from \"react\";\r\nimport SeasonDisplay from \"./SeasonDisplay\";\r\nimport Spinner from \"./Spinner\";\r\n\r\nclass App extends Component {\r\n  state = { lat: null, errorMessage: \"\" };\r\n\r\n  componentDidMount() {\r\n    window.navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        this.setState({ lat: position.coords.latitude });\r\n      },\r\n      (err) => {\r\n        this.setState({ errorMessage: err.message });\r\n      }\r\n    );\r\n  }\r\n\r\n  renderContent() {\r\n    if (this.state.errorMessage && !this.state.lat) {\r\n      return <div>Error: {this.state.errorMessage}</div>;\r\n    }\r\n\r\n    if (!this.state.errorMessage && this.state.lat) {\r\n      return <SeasonDisplay lat={this.state.lat} />;\r\n    }\r\n\r\n    return <Spinner message=\"Please accept location request\" />;\r\n  }\r\n\r\n  render() {\r\n    return <div>{this.renderContent()}</div>;\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}